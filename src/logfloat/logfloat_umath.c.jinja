#include <Python.h>

#include <stdbool.h>
#include <math.h>

#define PY_ARRAY_UNIQUE_SYMBOL numtypesx_ARRAY_API
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#define NO_IMPORT_ARRAY
#include "numpy/arrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/ufuncobject.h"

#include "numpy/experimental_dtype_api.h"

#include "logfloat_dtype.h"
#include "logfloat_umath.h"


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// The first template loop defines the C functions that operate on the
// log values.  No Python or NumPy API is involved in this template loop.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

{% for nbits, ctype, suffix in [('32', 'float', 'f'), ('64', 'double', '')] %}

//
// Unary operations...
//

//
// `positive` unary operation.
//
static {= ctype =}
logfloat{= nbits =}_positive({= ctype =} log1)
{
    return log1;
}

//
// `absolute` unary operation.
//
// For the logfloat types, this is the same as "positive",
// because there are no negative values.
//
static {= ctype =}
logfloat{= nbits =}_absolute({= ctype =} log1)
{
    return log1;
}

//
// `sign` unary operation.
//
// The sign ufunc returns the same dtype as the input.
// So this function returns the log of the sign of the
// floating point value that whose log is log1.  For values
// of log1 except -INFINITY, the return value is 0.0.
//
static {= ctype =}
logfloat{= nbits =}_sign({= ctype =} log1)
{
    if (log1 == -INFINITY) {
        return -INFINITY;
    }
    else {
        return 0.0;
    }
}

//
// `square` unary operation
//
static {= ctype =}
logfloat{= nbits =}_square({= ctype =} log1)
{
    return 2*log1;
}

//
// `sqrt` unary operation.
//
static {= ctype =}
logfloat{= nbits =}_sqrt({= ctype =} log1)
{
    return log1/2;
}

//
// `cbrt` unary operation.
//
static {= ctype =}
logfloat{= nbits =}_cbrt({= ctype =} log1)
{
    return log1/3;
}

//
// `reciprocal` unary operation.
//
static {= ctype =}
logfloat{= nbits =}_reciprocal({= ctype =} log1)
{
    return -log1;
}

//
// `isfinite` unary operation.
//
static bool
logfloat{= nbits =}_isfinite({= ctype =} log1)
{
    return (log1 == -INFINITY) || isfinite(log1);
}

//
// `isinf` unary operation.
//
static bool
logfloat{= nbits =}_isinf({= ctype =} log1)
{
    return isinf(log1) && (log1 > 0.0);
}

//
// Binary operations...
//

//
// Compute log(exp(log1) + exp(log2))
//
static {= ctype =}
logfloat{= nbits =}_log_add({= ctype =} log1, {= ctype =} log2)
{
    if (log1 == -INFINITY) {
        return log2;
    }
    else if (log2 == -INFINITY) {
        return log1;
    }
    else {
        return ((log1 > log2) ? log1 : log2) + log1p{= suffix =}(exp{= suffix =}(-fabs{= suffix =}(log2 - log1)));
    }
}

//
// Compute log(exp(log1) - exp(log2))
//
// if log2 > log1, nan is returned.
//
/* Currently unused.
static {= ctype =}
logsubexp{= suffix =}({= ctype =} log1, {= ctype =} log2)
{
    if (log2 == -INFINITY) {
        return log1;
    }
    if (log1 < log2) {
        return NAN;
    }
    if (log1 == log2) {
        return -INFINITY;
    }

    return log1 + log1p{= suffix =}(-exp{= suffix =}(log2 - log1));
}
*/

//
// Compute log(exp(log1) - exp(log2))
//
// if log2 > log1, nan is returned.
//
static {= ctype =}
logfloat{= nbits =}_log_subtract({= ctype =} log1, {= ctype =} log2)
{
    if (log1 < log2) {
        return NAN;
    }
    if (log1 == log2) {
        return -INFINITY;
    }
    return log1 + log1p{= suffix =}(-exp{= suffix =}(log2 - log1));
}

//
// Compute log(exp(log1) * exp(log2)) = log1 + log2
//
static {= ctype =}
logfloat{= nbits =}_log_multiply({= ctype =} log1, {= ctype =} log2)
{
    return log1 + log2;
}

//
// Compute log(exp(log1) / exp(log2)) = log1 - log2
//
static {= ctype =}
logfloat{= nbits =}_log_true_divide({= ctype =} log1, {= ctype =} log2)
{
    return log1 - log2;
}

//
// Compute log(exp(log1) ** exp(log2))
//
static {= ctype =}
logfloat{= nbits =}_log_power({= ctype =} log1, {= ctype =} log2)
{
    double value2 = exp(log2);
    return value2*log1;
}

{% endfor %}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// In these nested template loops, the strided loop functions
// are defined.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// Note: The `strided_loop` functions assume that the values stored in
// the input arrays are in native byte order.

{% for nbits, ctype, suffix in [('32', 'float', 'f'), ('64', 'double', '')] %}

// Unary operators, logfloat## -> logfloat##

{% for oper in ['positive', 'absolute', 'sign', 'square', 'sqrt', 'cbrt', 'reciprocal'] %}

static int
logfloat{= nbits =}_{= oper =}_strided_loop(
    PyArrayMethod_Context *context,
    char *const args[],
    npy_intp const dimensions[],
    npy_intp const strides[],
    NpyAuxData *auxdata)
{
    char *in1 = args[0];
    char *out = args[1];
    npy_intp n = dimensions[0];
    npy_intp in1_stride = strides[0];
    npy_intp out_stride = strides[1];

    for (npy_intp k = 0; k < n; ++k, in1 += in1_stride,
                                     out += out_stride) {
        {= ctype =} x = *({= ctype =} *) in1;
        *({= ctype =} *) out = logfloat{= nbits =}_{= oper =}(x);
    }

    return 0;
}

{% endfor %}

// Boolean unary operators, logfloat## -> bool

{% for oper in ['isinf', 'isfinite'] %}

static int
logfloat{= nbits =}_{= oper =}_strided_loop(
    PyArrayMethod_Context *context,
    char *const args[],
    npy_intp const dimensions[],
    npy_intp const strides[],
    NpyAuxData *auxdata)
{
    char *in1 = args[0];
    char *out = args[1];
    npy_intp n = dimensions[0];
    npy_intp in1_stride = strides[0];
    npy_intp out_stride = strides[1];

    for (npy_intp k = 0; k < n; ++k, in1 += in1_stride,
                                     out += out_stride) {
        {= ctype =} x = *({= ctype =} *) in1;
        *(bool *) out = logfloat{= nbits =}_{= oper =}(x);
    }

    return 0;
}

{% endfor %}

{% for oper in ['add', 'subtract', 'multiply', 'true_divide', 'power'] %}

static int
logfloat{= nbits =}_{= oper =}_strided_loop(
    PyArrayMethod_Context *context,
    char *const args[],
    npy_intp const dimensions[],
    npy_intp const strides[],
    NpyAuxData *auxdata)
{
    char *in1 = args[0];
    char *in2 = args[1];
    char *out = args[2];
    npy_intp n = dimensions[0];
    npy_intp in1_stride = strides[0];
    npy_intp in2_stride = strides[1];
    npy_intp out_stride = strides[2];

    for (npy_intp k = 0; k < n; ++k, in1 += in1_stride,
                                     in2 += in2_stride,
                                     out += out_stride) {
        {= ctype =} x = *({= ctype =} *) in1;
        {= ctype =} y = *({= ctype =} *) in2;
        *({= ctype =} *) out = logfloat{= nbits =}_log_{= oper =}(x, y);
    }

    return 0;
}

{% endfor %}

/**begin repeat1
 * #opname = equal, not_equal, less, less_equal, greater, greater_equal #
 * #op     = ==,    !=,        <,    <=,         >,       >=            #
 */

 {% for opname, op in [('equal', '=='), ('not_equal', '!='), ('less', '<'), ('less_equal', '<='), ('greater', '>'), ('greater_equal', '>=')] %}

static int
logfloat{= nbits =}_{= opname =}_strided_loop(
    PyArrayMethod_Context *context,
    char *const args[],
    npy_intp const dimensions[],
    npy_intp const strides[],
    NpyAuxData *auxdata)
{
    char *in1 = args[0];
    char *in2 = args[1];
    char *out = args[2];
    npy_intp n = dimensions[0];
    npy_intp in1_stride = strides[0];
    npy_intp in2_stride = strides[1];
    npy_intp out_stride = strides[2];

    for (npy_intp k = 0; k < n; ++k, in1 += in1_stride,
                                     in2 += in2_stride,
                                     out += out_stride) {
        {= ctype =} x = *({= ctype =} *) in1;
        {= ctype =} y = *({= ctype =} *) in2;
        *(npy_bool *) out = x {= op =} y;
    }

    return 0;
}

{% endfor %}

{% endfor %}

int
init_logfloat_ufuncs(void)
{
    PyObject *ufunc;

    PyObject *numpy = PyImport_ImportModule("numpy");
    if (numpy == NULL) {
        return -1;
    }

    // NOTE: The arrays logfloat32_dtypes and logfloat64_dtypes are
    // used when creating both the unary and binary ufuncs.

{% for nbits in ['32', '64'] %}

    PyArray_DTypeMeta *logfloat{= nbits =}_dtypes[3] = {
        &LogFloat{= nbits =}DType_Type,
        &LogFloat{= nbits =}DType_Type,
        &LogFloat{= nbits =}DType_Type,
    };

    PyArray_DTypeMeta *logfloat{= nbits =}_unary_bool_dtypes[2] = {
        &LogFloat{= nbits =}DType_Type,
        &PyArray_BoolDType,
    };

    PyArray_DTypeMeta *logfloat{= nbits =}_binary_bool_dtypes[3] = {
        &LogFloat{= nbits =}DType_Type,
        &LogFloat{= nbits =}DType_Type,
        &PyArray_BoolDType,
    };

{% endfor %}

{% for oper in ['isinf', 'isfinite'] %}

    ufunc = PyObject_GetAttrString(numpy, "{= oper =}");
    if (ufunc == NULL) {
        Py_DECREF(numpy);
        return -1;
    }

{% for nbits in ['32', '64'] %}

    static PyType_Slot logfloat{= nbits =}_{= oper =}_slots[] = {
        {NPY_METH_strided_loop, &logfloat{= nbits =}_{= oper =}_strided_loop},
        {0, NULL}
    };

    PyArrayMethod_Spec logfloat{= nbits =}_{= oper =}_spec = {
        .name = "logfloat{= nbits =}_{= oper =}",
        .nin = 1,
        .nout = 1,
        .dtypes = logfloat{= nbits =}_unary_bool_dtypes,
        .slots = logfloat{= nbits =}_{= oper =}_slots,
        .flags = 0,
        .casting = NPY_NO_CASTING,
    };

    if (PyUFunc_AddLoopFromSpec(ufunc, &logfloat{= nbits =}_{= oper =}_spec) < 0) {
        Py_DECREF(ufunc);
        Py_DECREF(numpy);
        return -1;
    }

{% endfor %}

    Py_DECREF(ufunc);

{% endfor %}

{% for oper in ['positive', 'absolute', 'sign', 'square', 'sqrt', 'cbrt', 'reciprocal'] %}

    ufunc = PyObject_GetAttrString(numpy, "{= oper =}");
    if (ufunc == NULL) {
        Py_DECREF(numpy);
        return -1;
    }

{% for nbits in ['32', '64'] %}

    static PyType_Slot logfloat{= nbits =}_{= oper =}_slots[] = {
        {NPY_METH_strided_loop, &logfloat{= nbits =}_{= oper =}_strided_loop},
        {0, NULL}
    };

    PyArrayMethod_Spec logfloat{= nbits =}_{= oper =}_spec = {
        .name = "logfloat{= nbits =}_{= oper =}",
        .nin = 1,
        .nout = 1,
        .dtypes = logfloat{= nbits =}_dtypes,  // Only using the first two.
        .slots = logfloat{= nbits =}_{= oper =}_slots,
        .flags = 0,
        .casting = NPY_NO_CASTING,
    };

    if (PyUFunc_AddLoopFromSpec(ufunc, &logfloat{= nbits =}_{= oper =}_spec) < 0) {
        Py_DECREF(ufunc);
        Py_DECREF(numpy);
        return -1;
    }

{% endfor %}

    Py_DECREF(ufunc);

{% endfor %}

{% for oper in ['add', 'subtract', 'multiply', 'true_divide', 'power'] %}

    ufunc = PyObject_GetAttrString(numpy, "{= oper =}");
    if (ufunc == NULL) {
        Py_DECREF(numpy);
        return -1;
    }

{% for nbits in ['32', '64'] %}

    static PyType_Slot logfloat{= nbits =}_{= oper =}_slots[] = {
        {NPY_METH_strided_loop, &logfloat{= nbits =}_{= oper =}_strided_loop},
        {0, NULL}
    };

    PyArrayMethod_Spec logfloat{= nbits =}_{= oper =}_spec = {
        .name = "logfloat{= nbits =}_{= oper =}",
        .nin = 2,
        .nout = 1,
        .dtypes = logfloat{= nbits =}_dtypes,
        .slots = logfloat{= nbits =}_{= oper =}_slots,
        .flags = 0,
        .casting = NPY_NO_CASTING,
    };

    if (PyUFunc_AddLoopFromSpec(ufunc, &logfloat{= nbits =}_{= oper =}_spec) < 0) {
        Py_DECREF(ufunc);
        Py_DECREF(numpy);
        return -1;
    }

{% endfor %}

    Py_DECREF(ufunc);

{% endfor %}

{% for oper in ['equal', 'not_equal', 'less', 'less_equal', 'greater', 'greater_equal'] %}

    ufunc = PyObject_GetAttrString(numpy, "{= oper =}");
    if (ufunc == NULL) {
        Py_DECREF(numpy);
        return -1;
    }

{% for nbits in ['32', '64'] %}

    static PyType_Slot logfloat{= nbits =}_{= oper =}_slots[] = {
        {NPY_METH_strided_loop, &logfloat{= nbits =}_{= oper =}_strided_loop},
        {0, NULL}
    };

    PyArrayMethod_Spec logfloat{= nbits =}_{= oper =}_spec = {
        .name = "logfloat{= nbits =}_{= oper =}",
        .nin = 2,
        .nout = 1,
        .dtypes = logfloat{= nbits =}_binary_bool_dtypes,
        .slots = logfloat{= nbits =}_{= oper =}_slots,
        .flags = 0,
        .casting = NPY_NO_CASTING,
    };

    if (PyUFunc_AddLoopFromSpec(ufunc, &logfloat{= nbits =}_{= oper =}_spec) < 0) {
        Py_DECREF(ufunc);
        Py_DECREF(numpy);
        return -1;
    }

{% endfor %}

    Py_DECREF(ufunc);

{% endfor %}

    Py_DECREF(numpy);
    return 0;
}
