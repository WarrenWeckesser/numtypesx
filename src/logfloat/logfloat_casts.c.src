#include <Python.h>

#define PY_ARRAY_UNIQUE_SYMBOL logfloat_ARRAY_API
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#define NO_IMPORT_ARRAY
#include "numpy/arrayobject.h"
#include "numpy/experimental_dtype_api.h"
#include "numpy/ndarraytypes.h"

#include "logfloat_casts.h"
#include "logfloat_dtype.h"

/**begin repeat
 *
 * #nbits = 32, 64#
 * #ctype = float, double#
 * #suffix = f, #
 */

static NPY_CASTING logfloat@nbits@_to_logfloat@nbits@_resolve_descriptors(
    PyObject* NPY_UNUSED(self),
    PyArray_DTypeMeta* NPY_UNUSED(dtypes[2]),
    PyArray_Descr* given_descrs[2],
    PyArray_Descr* loop_descrs[2],
    npy_intp* view_offset
) {
    Py_INCREF(given_descrs[0]);
    loop_descrs[0] = given_descrs[0];

    if (given_descrs[1] == NULL) {
        Py_INCREF(given_descrs[0]);
        loop_descrs[1] = given_descrs[0];
    }
    else {
        Py_INCREF(given_descrs[1]);
        loop_descrs[1] = given_descrs[1];
    }

    return NPY_NO_CASTING;
}

static int logfloat@nbits@_to_logfloat@nbits@_contiguous(
    PyArrayMethod_Context *NPY_UNUSED(context),
    char* const data[],
    npy_intp const dimensions[],
    npy_intp const strides[],
    void* auxdata
) {
    npy_intp n = dimensions[0];
    char *in = data[0];
    char *out = data[1];

    memcpy(out, in, n*sizeof(@ctype@));

    return 0;
}

static int logfloat@nbits@_to_logfloat@nbits@_strided(
    PyArrayMethod_Context *NPY_UNUSED(context),
    char* const data[],
    npy_intp const dimensions[],
    npy_intp const strides[],
    void* auxdata
) {
    npy_intp n = dimensions[0];
    char *in = data[0];
    char *out = data[1];
    npy_intp in_stride = strides[0];
    npy_intp out_stride = strides[1];

    while (n) {
        *((@ctype@ *) in) = *((@ctype@ *) out);
        in += in_stride;
        out += out_stride;
        --n;
    }

    return 0;
}

static int logfloat@nbits@_to_logfloat@nbits@_unaligned(
    PyArrayMethod_Context *NPY_UNUSED(context),
    char* const data[],
    npy_intp const dimensions[],
    npy_intp const strides[],
    void* auxdata
) {
    npy_intp n = dimensions[0];
    char *in = data[0];
    char *out = data[1];
    npy_intp in_stride = strides[0];
    npy_intp out_stride = strides[1];

    while (n) {
        *((@ctype@ *) in) = *((@ctype@ *) out);
        in += in_stride;
        out += out_stride;
        --n;
    }

    return 0;
}

// Returns the low-level C (strided inner-loop) function which
// performs the actual operation. This method may initially be private, users will be
// able to provide a set of optimized inner-loop functions instead:
// * `strided_inner_loop`
// * `contiguous_inner_loop`
// * `unaligned_strided_loop`
// * ...
static int logfloat@nbits@_to_logfloat@nbits@_get_loop(
    PyArrayMethod_Context* context,
    int aligned,
    int NPY_UNUSED(move_references),
    const npy_intp* strides,
    PyArrayMethod_StridedLoop** out_loop,
    NpyAuxData** out_transferdata,
    NPY_ARRAYMETHOD_FLAGS* flags
) {
    int contig = (strides[0] == sizeof(@ctype@) && strides[1] == sizeof(@ctype@));

    if (aligned && contig) {
        *out_loop = (PyArrayMethod_StridedLoop*) &logfloat@nbits@_to_logfloat@nbits@_contiguous;
    }
    else if (aligned) {
        *out_loop = (PyArrayMethod_StridedLoop*) &logfloat@nbits@_to_logfloat@nbits@_strided;
    }
    else {
        *out_loop = (PyArrayMethod_StridedLoop*) &logfloat@nbits@_to_logfloat@nbits@_unaligned;
    }

    *flags = 0;
    return 0;
}

/*
 * NumPy currently allows NULL for the own DType/"cls".  For other DTypes
 * we would have to fill it in here:
 */
static PyArray_DTypeMeta* LogFloat@nbits@_to_LogFloat@nbits@_DTypes[2] = { NULL, NULL };

static PyType_Slot LogFloat@nbits@_to_LogFloat@nbits@_Slots[] = {
    { NPY_METH_resolve_descriptors, &logfloat@nbits@_to_logfloat@nbits@_resolve_descriptors },
    { _NPY_METH_get_loop, &logfloat@nbits@_to_logfloat@nbits@_get_loop },
    { 0, NULL }
};


PyArrayMethod_Spec LogFloat@nbits@_to_LogFloat@nbits@_CastSpec = {
    .name = "cast_LogFloat@nbits@DType_to_LogFloat@nbits@DType",
    .nin = 1,
    .nout = 1,
    .flags = NPY_METH_SUPPORTS_UNALIGNED,
    .casting = NPY_NO_CASTING,
    .dtypes = LogFloat@nbits@_to_LogFloat@nbits@_DTypes,
    .slots = LogFloat@nbits@_to_LogFloat@nbits@_Slots,
};

/**end repeat**/
